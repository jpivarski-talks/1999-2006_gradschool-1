%!PS-Adobe-3.0
%%Title: addemup2.m
%%For: Jim Pivarski
%%Creator: a2ps version 4.13
%%CreationDate: Mon Feb  2 14:04:48 2004
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Portrait
%%Pages: 4
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 792 def
/sw 612 def
/llx 24 def
/urx 588 def
/ury 768 def
/lly 24 def
/#copies 1 def
/th 20.000000 def
/fnfs 15 def
/bfs 8.000000 def
/cw 4.800000 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 117.400000 mul
def
/ph
   693.600000 th add
def
/pmw 0 def
/pmh 0 def
/v 0 def
/x [
  0
] def
/y [
  pmh ph add 0 mul ph add
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1) 1
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.360000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(<< Statistics`ContinuousDistributions`) p n
() N
(y1scont = ReadList["y1s_cont.lubg", {Number, Number, Number}];) N
(y1speak = ReadList["y1s_peak.lubg", {Number, Number, Number}];) N
(y1shigh = ReadList["y1s_high.lubg", {Number, Number, Number}];) N
(y2scont = ReadList["y2s_cont.lubg", {Number, Number, Number}];) N
(y2speak = ReadList["y2s_peak.lubg", {Number, Number, Number}];) N
(y2shigh = ReadList["y2s_high.lubg", {Number, Number, Number}];) N
(y3scont = ReadList["y3s_cont.lubg", {Number, Number, Number}];) N
(y3speak = ReadList["y3s_peak.lubg", {Number, Number, Number}];) N
(y3shigh = ReadList["y3s_high.lubg", {Number, Number, Number}];) N
() N
(ListFromConf[data_, conf_] := #[[1]]& /@ Select[data * conf, \(# != {0, 0, 0}\)&];) N
(ConfFromList[data_, list_] := If[MemberQ[list, #[[1]]], 1, 0]& /@ data;) N
(EmptyConf[data_] := Table[0, {Length[data]}];) N
(FilledConf[data_] := Table[1, {Length[data]}];) N
(ConfSum[data_, conf_] := \(Plus @@ \(#[[3]]& /@ \(data * conf\)\) /) N
() S 8 T () S 16 T () S 24 T (  Plus @@ \(#[[2]]& /@ \(data * conf\)\)  \);) N
(ChangeConf1[conf_] := Module[{i = Random[Integer, Length[conf]-1]+1},) N
() S 8 T () S 16 T () S 24 T (     ReplacePart[conf, 1 - conf[[i]], i]];) N
(FindOnes[conf_] := Flatten[Table[If[conf[[i]] == 1, {i}, {}], {i, 1, Length[conf]}], 1];) N
(FindZeros[conf_] := Flatten[Table[If[conf[[i]] == 0, {i}, {}], {i, 1, Length[conf]}], 1];) N
(RandElem[list_] := list[[Random[Integer, Length[list]-1]+1]];) N
(ChangeConf2[conf_] := Module[{i = RandElem[FindOnes[conf]],) N
() S 8 T () S 16 T () S 24 T (      j = RandElem[FindZeros[conf]]},) N
() S 8 T () S 16 T () S 24 T (     ReplacePart[ReplacePart[conf, 1 - conf[[i]], i], 1 - conf[[j]], j]];) N
(ChangeConf[conf_] := If[\(Plus @@ conf\) > 0  &&  Random[Integer, 500] > 0,) N
() S 8 T () S 16 T () S 24 T (ChangeConf2[conf],) N
() S 8 T () S 16 T () S 24 T (ChangeConf1[conf]];) N
(PickARun[list_, range_] :=) N
(    Module[{sublist = Select[list, \(# >= range[[1]]  &&  # <= range[[2]]\)&]},) N
() S 8 T (   sublist[[Random[Integer, Length[sublist] - 1] + 1]]];) N
(LumiSum[data_, conf_] := Plus @@ \(#[[2]]& /@ \(data * conf\)\);) N
(BeefItUp[data_, conf_] := If[LumiSum[data, conf] > 21000, conf,) N
() S 8 T () S 16 T () S 24 T (     BeefItUp[data, ChangeConf1[conf]]];) N
(InitialConf[data_, ranges_] :=) N
(    BeefItUp[data, ConfFromList[data, Module[{thelist = #[[1]]& /@ data},) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (     PickARun[thelist, #]& /@ ranges]]];) N
(ConfRuns[data_, conf_] := \(Print[TableForm[Select[data * conf, \(# != {0, 0, 0}\)&]]];) N
() S 8 T () S 16 T () S 24 T (   Print[]; Print["-----------------------"]; Print[];) N
() S 8 T () S 16 T () S 24 T (   Print["       ",) N
() S 8 T () S 16 T () S 24 T () S 32 T ( Plus @@ \(#[[2]]& /@ \(data * conf\)\), "  ",) N
() S 8 T () S 16 T () S 24 T () S 32 T ( Plus @@ \(#[[3]]& /@ \(data * conf\)\), "  ==>  ",) N
() S 8 T () S 16 T () S 24 T () S 32 T ( ConfSum[data, conf]]\);) N
(RangeFilled[range_, list_] := Or @@ \(\(# >= range[[1]] && # <= range[[2]]\)& /@ list\);) N
(RangesFilled[ranges_, list_] := And @@ \(RangeFilled[#, list]& /@ ranges\);) N
(FindBest[data_, goal_, ranges_] := ) N
(    Module[{lastconf, lastval, newconf, newval, inranges, fall, grope, outplot},) N
() S 8 T (   lastconf = InitialConf[data, ranges];) N
() S 8 T (   lastval = Abs[ConfSum[data, lastconf] - goal];) N
() S 8 T (   \(* Print[lastval]; *\)) N
() S 8 T (   While[lastval > 0.000001, \() N
() S 8 T (       inranges = False;) N
() S 8 T (       While[!inranges, \() N
() S 8 T () S 16 T (   newconf = ChangeConf[lastconf];) N
() S 8 T () S 16 T (   inranges = RangesFilled[ranges, ListFromConf[data, newconf]];) N
() S 8 T () S 16 T () S 24 T () S 32 T (\)];) N
() S 8 T (       newval = Abs[ConfSum[data, newconf] - goal];) N
() S 8 T (       fall = newval < lastval;) N
() S 8 T (       grope = If[fall, False, Random[ExponentialDistribution[50000]] > \(newval - lastval\)];) N
() S 8 T (       \(* Print[lastval, " ", newval, " ", fall, " ", grope]; *\)) N
() S 8 T (       If[\(fall || grope\), {lastval = newval, lastconf = newconf}]) N
() S 8 T () S 16 T () S 24 T () S 32 T (   \)];) N
() S 8 T (   ConfRuns[data, lastconf];) N
() S 8 T (   outplot = Table[{i, data[[i, 1]]}, {i, 1, Length[data]}];) N
() S 8 T (   Show[ListPlot[outplot,) N
() S 8 T () S 16 T () S 24 T ( AspectRatio -> 3,) N
() S 8 T () S 16 T () S 24 T ( DisplayFunction -> Identity],) N
() S 8 T () S 16 T (ListPlot[Select[outplot * lastconf, \(# != {0, 0}\)&],) N
() S 8 T () S 16 T () S 24 T ( PlotStyle -> RGBColor[1, 0, 0],) N
() S 8 T () S 16 T () S 24 T ( DisplayFunction -> Identity],) N
() S 8 T () S 16 T (DisplayFunction -> $DisplayFunction];) N
() S 8 T (   #[[1]]& /@ Select[data * lastconf, \(# != {0, 0, 0}\)&]];) N
(PrintRuns[data_] := Print[TableForm[\(#[[1]]& /@ data\)]];) N
(PlotData[data_, lines_] := \(Show[ListPlot[Table[{i, data[[i, 1]]}, {i, 1, Length[data]}],) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (  AspectRatio -> 3,) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T (  DisplayFunction -> Identity],) N
() S 8 T () S 16 T () S 24 T () S 32 T ( Graphics[Prepend[Line[{{1, #}, {Length[data], #}}]& /@ lines, RGBColor[1, 0, 0]]],) N
() S 8 T () S 16 T () S 24 T () S 32 T ( DisplayFunction -> $DisplayFunction];) N
() S 8 T () S 16 T () S 24 T (    Table[{lines[[i]], lines[[i+1]]}, {i, 1, Length[lines]-1}]\);) N
() N
() N
() N
() N
() N
() N
(addemup2.m) (Page 1/4) (Feb 02, 04 14:04) title
border
grestore
(Printed by Jim Pivarski) rhead
() (1/4) (Monday February 02, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (2) 2
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.360000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (                                          FIRST THE UPSILON-1S!!!!!) N
() N
() S 8 T (  ConfRuns[y1shigh, FilledConf[y1shigh]];) N
() N
() S 8 T (  124960   286.8    8.4) N
() S 8 T (  124961   1437.    53.9) N
() S 8 T (  124962   1215.4   53.2) N
() S 8 T (  124963   1233.2   44.8) N
() S 8 T (  124966   517.3    14.7) N
() S 8 T (  124967   878.8    35) N
() S 8 T (  124968   905.5    45.5) N
() S 8 T (  124969   1013.3   39.9) N
() S 8 T (  124970   1029.3   33.6) N
() S 8 T (  124971   1058.9   44.1) N
() S 8 T (  124972   941.     24.5) N
() S 8 T (  124973   1007.4   39.2) N
() S 8 T (  -----------------------) N
() S 8 T (         11523.9  436.8  ==>  0.0379038) N
() N
() S 8 T (  y1scontRanges = PlotData[) N
() S 8 T (      y1scont, {123300, 123500, 123700, 123900, 124000, 124200, 124400,) N
() S 8 T (  ) S 16 T (      124600, 124750, 125000, 125250, 125500}];) N
() N
() S 8 T (  FindBest[y1scont, 0.0379038, y1scontRanges];) N
() N
() S 8 T (  123370   1699.    60.2) N
() S 8 T (  123566   1562.2   59.5) N
() S 8 T (  123570   1691.5   59.5) N
() S 8 T (  123774   1366.5   43.4) N
() S 8 T (  123944   718.3    50.4) N
() S 8 T (  123961   1811.4   72.8) N
() S 8 T (  124126   1565.1   56) N
() S 8 T (  124300   1213.2   35.7) N
() S 8 T (  124475   1543.3   58.1) N
() S 8 T (  124665   1502.9   58.1) N
() S 8 T (  124667   901.1    35) N
() S 8 T (  124807   497.9    15.4) N
() S 8 T (  124808   1092.2   45.5) N
() S 8 T (  125175   1616.1   61.6) N
() S 8 T (  125176   1564.1   58.1) N
() S 8 T (  125297   819.3    32.9) N
() S 8 T (  -----------------------) N
() S 8 T (         21164.1  802.2  ==>  0.0379038) N
() N
() S 8 T (  y1speakRanges = PlotData[) N
() S 8 T (      y1speak, {123100, 123500, 123700, 123900, 124075, 124120, 124250, 124420,) N
() S 8 T (  ) S 16 T (      124600, 124775, 125000, 125170, 125250, 125280, 126000}];) N
() N
() S 8 T (  FindBest[y1speak, 0.0379038, y1speakRanges];) N
() N
() S 8 T (  123197   1094.1   44.8) N
() S 8 T (  123636   1500.3   51.1) N
() S 8 T (  123864   2266.2   73.5) N
() S 8 T (  123865   2323.    88.9) N
() S 8 T (  123996   278.5    12.6) N
() S 8 T (  124092   595.9    28.7) N
() S 8 T (  124146   1022.9   28.7) N
() S 8 T (  124328   1778.2   59.5) N
() S 8 T (  124343   794.9    27.3) N
() S 8 T (  124373   2019.1   70) N
() S 8 T (  124481   1905.3   65.1) N
() S 8 T (  124498   1694.8   68.6) N
() S 8 T (  124699   1709.2   74.2) N
() S 8 T (  124702   2185.5   91) N
() S 8 T (  124853   1733.1   63.7) N
() S 8 T (  125155   1846.9   75.6) N
() S 8 T (  125183   201.9    7) N
() S 8 T (  125222   1517.3   58.8) N
() S 8 T (  125264   835.5    38.5) N
() S 8 T (  125318   1544.6   65.8) N
() S 8 T (  -----------------------) N
() S 8 T (         28847.2  1093.4  ==>  0.0379032) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(addemup2.m) (Page 2/4) (Feb 02, 04 14:04) title
border
grestore
(Printed by Jim Pivarski) rhead
() (Monday February 02, 2004) (2/4) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 3
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.360000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (                                          NEXT THE UPSILON-2S!!!!!) N
() N
() S 8 T (  ConfRuns[y2shigh, FilledConf[y2shigh]];) N
() N
() S 8 T (  127206   311.9   10.5) N
() S 8 T (  127213   749.7   19.6) N
() S 8 T (  127214   884.9   24.5) N
() S 8 T (  127215   863.8   23.8) N
() S 8 T (  127217   815.6   19.6) N
() S 8 T (  127218   538.7   14.7) N
() S 8 T (  127219   630.4   12.6) N
() S 8 T (  -----------------------) N
() S 8 T (         4795.  125.3  ==>  0.0261314) N
() N
() S 8 T (  y2scontRanges = PlotData[) N
() S 8 T (      y2scont, {126200, 126300, 126600, 126800, 127000, 127433, 127500,) N
() S 8 T (  ) S 16 T (      127800, 128100, 129200, 129600, 129700, 129800, 130000}];) N
() N
() S 8 T (  FindBest[y2scont, 0.0261314, y2scontRanges];) N
() N
() S 8 T (  126265   1664.5   46.2) N
() S 8 T (  126476   548.8    11.9) N
() S 8 T (  126673   1220.7   35.7) N
() S 8 T (  126846   1818.3   44.1) N
() S 8 T (  126851   1100.2   24.5) N
() S 8 T (  127422   1366.4   37.8) N
() S 8 T (  127444   1608.2   42.7) N
() S 8 T (  127680   2295.1   58.8) N
() S 8 T (  127690   1737.2   40.6) N
() S 8 T (  127955   287.     11.9) N
() S 8 T (  129066   2316.7   51.1) N
() S 8 T (  129531   843.2    28.7) N
() S 8 T (  129689   1085.1   30.1) N
() S 8 T (  129724   504.9    18.2) N
() S 8 T (  129853   1962.8   49.7) N
() S 8 T (  -----------------------) N
() S 8 T (         20359.1  532.  ==>  0.0261308) N
() N
() S 8 T (  y2speakRanges = PlotData[) N
() S 8 T (      y2speak, {126400, 126700, 126845, 127000, 127500, 129602, 129800}];) N
() N
() S 8 T (  FindBest[y2speak, 0.0261308, y2speakRanges];) N
() N
() S 8 T (  126503   375.3    11.9) N
() S 8 T (  126509   1649.1   57.4) N
() S 8 T (  126831   711.5    29.4) N
() S 8 T (  126892   1790.7   49) N
() S 8 T (  127268   1792.3   44.1) N
() S 8 T (  127269   1835.9   45.5) N
() S 8 T (  127279   1399.5   32.9) N
() S 8 T (  127285   2348.2   60.2) N
() S 8 T (  127306   1060.1   29.4) N
() S 8 T (  127327   2252.    53.2) N
() S 8 T (  129553   534.9    7) N
() S 8 T (  129564   2711.4   71.4) N
() S 8 T (  129573   680.9    9.1) N
() S 8 T (  129617   2292.8   59.5) N
() S 8 T (  129635   2703.9   72.1) N
() S 8 T (  129651   2783.6   71.4) N
() S 8 T (  -----------------------) N
() S 8 T (         26922.1  703.5  ==>  0.0261309) N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
() N
(addemup2.m) (Page 3/4) (Feb 02, 04 14:04) title
border
grestore
(Printed by Jim Pivarski) rhead
() (3/4) (Monday February 02, 2004) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (4) 4
%%BeginPageSetup
/pagesave save def
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.360000 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (                                          FINALLY THE UPSILON-3S!!!!!) N
() N
() S 8 T (  ConfRuns[y3shigh, FilledConf[y3shigh]];) N
() N
() S 8 T (  122568   994.9    56.7) N
() S 8 T (  122569   956.7    37.8) N
() S 8 T (  122570   1591.8   90.3) N
() S 8 T (  122571   1635.    86.1) N
() S 8 T (  122572   1693.1   93.8) N
() S 8 T (  122573   1706.5   80.5) N
() S 8 T (  122574   1247.    56.7) N
() S 8 T (  122575   1189.6   63) N
() S 8 T (  -----------------------) N
() S 8 T (         11014.6  564.9  ==>  0.0512865) N
() N
() S 8 T (  y3scontRanges = PlotData[) N
() S 8 T (      y3scont, Union[{121800, 122000, 122000, 122220, 122400, 122500,) N
() S 8 T (  ) S 16 T () S 24 T (    122700, 122900, 123200}]];) N
() N
() S 8 T (  FindBest[y3scont, 0.0512865, y3scontRanges];) N
() N
() S 8 T (  121906   678.4    60.2) N
() S 8 T (  121914   469.5    34.3) N
() S 8 T (  121915   1265.9   68.6) N
() S 8 T (  122081   1714.4   107.1) N
() S 8 T (  122083   1196.8   64.4) N
() S 8 T (  122264   788.     49.7) N
() S 8 T (  122269   1553.    86.8) N
() S 8 T (  122418   1571.9   68.6) N
() S 8 T (  122427   1581.7   83.3) N
() S 8 T (  122428   1779.4   86.1) N
() S 8 T (  122585   1673.4   87.5) N
() S 8 T (  122593   682.     30.1) N
() S 8 T (  122797   1613.7   69.3) N
() S 8 T (  122800   1628.    62.3) N
() S 8 T (  122810   1618.9   70) N
() S 8 T (  123011   1340.8   56.7) N
() S 8 T (  -----------------------) N
() S 8 T (         21155.8  1085.  ==>  0.0512862) N
() N
() S 8 T (  y3speakRanges = PlotData[) N
() S 8 T (      y3speak, Union[{121800, 121958, 122000, 122085, 122120, 122200,) N
() S 8 T (  ) S 16 T () S 24 T (    122270, 122375, 122458, 122477, 122500, 122600,) N
() S 8 T (  ) S 16 T () S 24 T (    122637, 122800, 122850, 123000, 123032, 123046, 123200}]];) N
() N
() S 8 T (  FindBest[y3speak, 0.0512862, y3speakRanges];) N
() N
() S 8 T (  121946   448.2    35) N
() S 8 T (  121966   2536.1   182.7) N
() S 8 T (  122079   1962.3   114.8) N
() S 8 T (  122105   1720.    119) N
() S 8 T (  122123   1781.1   137.2) N
() S 8 T (  122263   255.8    20.3) N
() S 8 T (  122301   2224.3   133) N
() S 8 T (  122454   1954.    98) N
() S 8 T (  122472   2562.4   118.3) N
() S 8 T (  122480   1412.3   61.6) N
() S 8 T (  122577   1280.1   63) N
() S 8 T (  122619   2287.6   102.9) N
() S 8 T (  122649   2275.1   94.5) N
() S 8 T (  122831   2271.1   98) N
() S 8 T (  122859   2547.1   97.3) N
() S 8 T (  123026   2113.8   71.4) N
() S 8 T (  123042   2274.7   100.8) N
() S 8 T (  123056   673.7    23.1) N
() S 8 T (  -----------------------) N
() S 8 T (         32579.7  1670.9  ==>  0.0512865) N
() S 8 T (            ) S
(addemup2.m) (Page 4/4) (Feb 02, 04 14:04) title
border
grestore
(Printed by Jim Pivarski) rhead
() (Monday February 02, 2004) (4/4) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
