#!/usr/local/bin/perl

$energy_directory = "/home/mrs43/energy_program/archived_logs";
@energy_logs = ("energy_20011211-20020213.log",
		"energy_20020213-20020501.log",
		"energy_20020501-20021008.log",
		"energy_20021011-20021203.log");

@scan_runs = (125119, 125120, 125121, 125122, 125124, 125125, 125126,
	      125127, 125254, 125255, 125256, 125257, 125259, 125260,
	      125261, 125262, 125285, 125286, 125287, 125288, 125290,
	      125291, 125292, 125293, 125294, 125295, 125305, 125307,
	      125309, 125310, 125311, 128303, 128305, 128306, 128307,
	      128309, 128310, 128312, 128313, 128314, 128315, 128316,
	      122063, 122064, 122066, 122069, 122070, 122071, 122072,
	      122073, 122074, 122076, 122077, 122245, 122246, 122247,
	      122249, 122251, 122252, 122253, 122256, 122409, 122410,
	      122411, 122412, 122413, 122414, 122415, 122416, 122536,
	      122537, 122538, 122539, 122540, 122541, 122542, 122545,
	      122546, 122548, 122549, 122550, 122551, 122555, 122556,
	      122557, 122559, 122560, 122562, 122563, 122564, 123781,
	      123782, 123783, 123784, 123786, 123787, 123789, 123790,
	      123792, 124080, 124081, 124084, 124085, 124086, 124087,
	      124089, 124091, 124102, 124103, 124106, 124107, 124109,
	      124110, 124111, 124112, 124281, 124282, 124286, 124289,
	      124290, 124291, 124293, 124294, 124296, 124327, 122766,
	      122767, 122768, 122769, 122770, 122771, 122772, 122773,
	      122776, 122777, 122778, 122779, 122780, 122781, 122993,
	      122994, 122995, 122996, 122998, 122999, 123001, 123002,
	      123003, 123004, 123164, 123165, 123166, 123167, 123168,
	      123169, 123170, 123175, 123176, 123178, 123596, 123597,
	      123598, 123599, 123600, 123601, 123602, 123603, 123604,
	      123606, 123607, 123608, 127588, 127589, 127592, 127594,
	      127598, 127600, 127601, 127602, 127606, 127588, 127589,
	      127592, 127594, 127598, 127600, 127601, 127602, 127606,
	      127610, 127611, 127612, 127613, 127615, 127924, 127925,
	      127927, 127928, 127930, 127931, 127932, 127933, 127956,
	      127957, 127958, 127959, 127961, 127962, 127963, 126776,
	      126777, 126778, 126779, 126780, 126782, 126783, 126814,
	      126815, 126817, 126821, 126823, 126824, 126825, 127251,
	      127257, 127261, 127262, 127263, 127264, 127266, 127267,
	      127268, 127269, 127270, 127271, 127272, 127273, 127276,
	      127278, 127279, 127280, 127282, 127283, 127285, 127287,
	      127288, 127289, 127290, 127291, 127294, 127295, 127296,
	      127297, 127302, 127304, 127306, 127307, 127308, 127310,
	      127312, 127315, 127317, 127318, 127319, 127320, 127321,
	      127322, 127325, 127327, 127328, 127329, 127330, 124436,
	      124437, 124440, 124444, 124445, 124448, 124449, 124450,
	      124452, 124625, 124626, 124629, 124630, 124632, 124633,
	      124639, 124640, 124641, 126422, 126424, 126428, 126429,
	      126431, 126432, 126433, 126434, 126435, 126436, 126449,
	      126451, 126453, 126454, 126457, 126458, 126460, 126461,
	      126462, 126464, 126465, 126467, 126469, 121887, 121889,
	      121890, 121891, 121892, 121895, 121897, 121898);

@peak_runs = (125149, 125151, 125153, 125154, 125155, 125179, 125183,
	      125184, 125187, 125188, 125189, 125190, 125191, 125192,
	      125193, 125194, 125197, 125198, 125199, 125200, 125202,
	      125205, 125206, 125207, 125208, 125209, 125212, 125213,
	      125214, 125215, 125217, 125219, 125220, 125222, 125223,
	      125224, 125225, 125226, 125227, 125264, 125303, 125312,
	      125316, 125317, 125318, 125323, 125325, 125326, 125327,
	      125329, 125331, 125335, 125337, 125338, 125339, 125340,
	      125343, 125344, 125345, 125346, 125347, 125348, 125351,
	      125352, 125353, 125354, 125357, 125358, 125360, 125361,
	      125362, 125363, 125364, 125366, 125367, 125368, 125369,
	      125370, 122079, 122092, 122093, 122094, 122097, 122098,
	      122099, 122100, 122101, 122102, 122104, 122105, 122108,
	      122109, 122117, 122123, 122124, 122125, 122126, 122127,
	      122128, 122129, 122132, 122133, 122134, 122136, 122137,
	      122138, 122139, 122141, 122142, 122143, 122145, 122146,
	      122147, 122263, 122274, 122275, 122276, 122277, 122278,
	      122279, 122280, 122281, 122283, 122285, 122286, 122287,
	      122288, 122289, 122291, 122292, 122293, 122296, 122297,
	      122298, 122300, 122301, 122305, 122306, 122307, 122309,
	      122310, 122312, 122313, 122314, 122315, 122316, 122317,
	      122319, 122321, 122322, 122323, 122437, 122439, 122440,
	      122442, 122443, 122445, 122447, 122448, 122450, 122452,
	      122453, 122454, 122455, 122461, 122462, 122464, 122465,
	      122466, 122467, 122468, 122469, 122470, 122471, 122472,
	      122473, 122476, 122480, 122576, 122577, 122578, 122579,
	      122608, 122610, 122613, 122614, 122615, 122616, 122617,
	      122618, 122619, 122620, 122622, 122623, 122625, 122626,
	      122627, 122628, 122629, 122630, 122631, 122632, 122634,
	      122640, 122641, 122642, 122643, 122646, 122647, 122648,
	      122649, 122650, 122653, 122654, 122657, 122658, 122661,
	      122665, 122667, 122668, 122669, 122672, 122673, 123821,
	      123822, 123823, 123826, 123829, 123830, 123831, 123833,
	      123836, 123837, 123839, 123840, 123841, 123842, 123843,
	      123844, 123845, 123847, 123848, 123849, 123850, 123851,
	      123852, 123853, 123858, 123859, 123860, 123862, 123863,
	      123864, 123865, 123866, 123867, 123868, 123869, 123871,
	      123872, 123873, 123963, 123964, 123965, 123966, 123969,
	      123970, 123971, 123972, 123973, 123974, 123976, 123977,
	      123979, 123980, 123981, 123982, 123984, 123985, 123986,
	      123987, 123991, 123992, 123993, 123994, 123995, 123996,
	      123997, 123998, 123999, 124000, 124001, 124002, 124003,
	      124007, 124008, 124010, 124011, 124012, 124013, 124014,
	      124016, 124017, 124018, 124019, 124092, 124142, 124144,
	      124146, 124149, 124150, 124152, 124153, 124154, 124155,
	      124156, 124158, 124159, 124162, 124164, 124165, 124166,
	      124167, 124170, 124171, 124172, 124173, 124174, 124175,
	      124176, 124177, 124178, 124179, 124181, 124185, 124186,
	      124188, 124190, 124192, 124193, 124194, 124328, 124329,
	      124333, 124334, 124335, 124336, 124337, 124338, 124339,
	      124341, 124343, 124344, 124346, 124347, 124348, 124349,
	      124350, 124351, 124352, 124353, 124354, 124357, 124359,
	      124360, 124361, 124363, 124364, 124365, 124368, 124369,
	      124372, 124373, 124374, 124375, 124376, 122812, 122813,
	      122815, 122816, 122819, 122820, 122821, 122823, 122824,
	      122825, 122826, 122827, 122829, 122830, 122831, 122832,
	      122833, 122835, 122838, 122841, 122842, 122843, 122844,
	      122845, 122846, 122847, 122853, 122855, 122856, 122858,
	      122859, 122860, 123010, 123020, 123021, 123022, 123023,
	      123024, 123025, 123026, 123027, 123028, 123029, 123034,
	      123035, 123036, 123038, 123039, 123040, 123041, 123042,
	      123043, 123044, 123048, 123049, 123050, 123051, 123052,
	      123054, 123055, 123056, 123058, 123059, 123060, 123062,
	      123063, 123065, 123193, 123196, 123197, 123198, 123200,
	      123201, 123202, 123610, 123611, 123612, 123615, 123616,
	      123617, 123618, 123619, 123620, 123621, 123623, 123624,
	      123631, 123632, 123633, 123635, 123636, 123637, 123638,
	      123639, 123640, 123641, 123643, 123644, 123645, 123646,
	      123647, 123648, 123650, 123651, 123652, 123653, 123654,
	      123655, 123656, 123658, 123659, 126831, 126858, 126859,
	      126862, 126866, 126868, 126869, 126870, 126871, 126874,
	      126875, 126877, 126878, 126879, 126880, 126881, 126882,
	      126883, 126890, 126892, 126893, 126894, 126895, 126906,
	      126907, 126909, 126911, 126912, 126914, 126915, 124479,
	      124480, 124481, 124484, 124486, 124487, 124490, 124491,
	      124492, 124493, 124495, 124496, 124497, 124498, 124499,
	      124500, 124502, 124505, 124506, 124507, 124508, 124509,
	      124510, 124513, 124515, 124516, 124517, 124518, 124519,
	      124522, 124523, 124524, 124525, 124526, 124527, 124671,
	      124672, 124673, 124674, 124675, 124676, 124677, 124678,
	      124679, 124680, 124681, 124683, 124684, 124685, 124687,
	      124688, 124690, 124691, 124695, 124699, 124701, 124702,
	      124704, 124705, 124706, 124707, 124708, 124709, 124712,
	      124713, 124714, 124716, 124718, 124719, 124822, 124823,
	      124824, 124828, 124829, 124830, 124832, 124833, 124836,
	      124838, 124839, 124841, 124844, 124845, 124848, 124849,
	      124850, 124851, 124852, 124853, 124855, 124856, 124860,
	      124861, 124862, 124863, 124864, 124865, 124870, 124871,
	      124875, 124877, 126496, 126499, 126500, 126503, 126505,
	      126506, 126507, 126508, 126509, 126510, 126511, 126513,
	      126514, 126520, 126521, 126525, 126527, 126528, 126531,
	      126532, 126535, 126536, 126540, 126541, 126542, 126546,
	      126552, 126554, 126555, 126556, 126557, 126559, 126562,
	      126563, 126564, 126566, 126568, 126575, 126577, 126578,
	      126579, 126581, 121916, 121917, 121918, 121920, 121924,
	      121925, 121927, 121928, 121929, 121930, 121932, 121933,
	      121935, 121936, 121939, 121940, 121943, 121944, 121946,
	      121948, 121949, 121950, 121951, 121952, 121953, 121956,
	      121961, 121962, 121963, 121965, 121966, 121968, 121969,
	      121970, 121972, 121973, 121974, 129535, 129536, 129538,
	      129539, 129540, 129541, 129542, 129543, 129544, 129545,
	      129549, 129550, 129551, 129552, 129553, 129555, 129556,
	      129557, 129558, 129560, 129564, 129565, 129566, 129567,
	      129568, 129570, 129572, 129573, 129574, 129575, 129576,
	      129579, 129580, 129582, 129591, 129592, 129593, 129596,
	      129597, 129598, 129599, 129600, 129601, 129603, 129604,
	      129605, 129610, 129611, 129617, 129618, 129619, 129620,
	      129622, 129623, 129626, 129629, 129630, 129631, 129632,
	      129633, 129635, 129637, 129638, 129641, 129643, 129644,
	      129645, 129646, 129647, 129648, 129649, 129651, 129652,
	      129653, 129654, 129655, 129656, 129659, 129660, 129672,
	      129673, 129674, 129675, 129676, 129677, 129678, 129680,
	      129681, 129685, 129687, 129689, 129691, 129692, 129693,
	      129707, 129708, 129709, 129710, 129711, 129712, 129713,
	      129714, 129715, 129716, 129719, 129723, 129724, 129725,
	      129728, 129730);

@theJulianDate = ( 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334 );

sub leap_day                 
{                           
    my ($year,$month,$day) = @_;

    if (year % 4) {
	0;
    }

    if (!(year % 100)) {    # years that are multiples of 100 are not leap years
	if (year % 400) {   # unless they are multiples of 400
	    0;
	}
    }
    if (month < 2) {
	0;
    } elsif ((month == 2) && (day < 29)) {
	0;
    } else {
	1;
    }
}

sub julian_day
{
#     my ($dateInSeconds) = @_;
#     my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday);
#     ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday) =
# 	localtime($dateInSeconds);

    my ($year, $mon, $mday) = @_;
    $mon--;

    $theJulianDate[$mon] + $mday + &leap_day($year,$mon,$mday);
}

sub seconds_since_midnight
{
    my ($hour, $minute) = @_;
    60 * ((60 * $hour) + $minute);
}

sub cesr_timestamp
{
    1e6 * (&julian_day(@_[0..2]) - 1) + int(&seconds_since_midnight(@_[3..4]) / 0.0864);
}

sub super_timestamp
{
    my $year;
    if ( @_[0] == 2001 ) { $year = 0; }
    elsif ( @_[0] == 2002 ) { $year = 1; }
    else { die; }

    365e6 * $year + &cesr_timestamp(@_);
}

sub back_to_cesr
{
    $_[0] % 365000000;
}

@records = ();
foreach my $log (@energy_logs) {
    open(LOG, "$energy_directory/$log");
    my $year = "-";
    my $month = "-";
    my $day = "-";
    my $hour = "-";
    my $minute = "-";
    my $sen1Used = "-";
    my $sen2Used = "-";
    my $beamEnergy = "-";
    while (my $line = <LOG>) {
	if ($line =~ /date=\s+([0-9]{4})([0-9]{2})([0-9]{2})/) {
	    $year = $1;
	    $month = $2;
	    $day = $3;
	}
	elsif ($line =~ /time=\s+([0-9]{2}):([0-9]{2})/) {
	    $hour = $1;
	    $minute = $2;
	}
	elsif ($line =~ /sen1Used=\s+([a-z]+)/) {
	    $sen1Used = $1;
	}
	elsif ($line =~ /sen2Used=\s+([a-z]+)/) {
	    $sen2Used = $1;
	}
	elsif ($line =~ /beamEnergy=\s+([0-9\.\-\+eE]+)/) {
	    $beamEnergy = $1;
	}
	elsif ($line =~ /END OF RECORD/) {
	    die if ($year eq "-");
	    die if ($month eq "-");
	    die if ($day eq "-");
	    die if ($hour eq "-");
	    die if ($minute eq "-");
	    die if ($sen1Used eq "-");
	    die if ($sen2Used eq "-");
	    die if ($beamEnergy eq "-");
	    push(@records, [&super_timestamp($year, $month, $day, $hour, $minute),
			    $sen1Used, $sen2Used]);  #  , $beamEnergy]);
	    my $year = "-";
	    my $month = "-";
	    my $day = "-";
	    my $hour = "-";
	    my $minute = "-";
	    my $sen1Used = "-";
	    my $sen2Used = "-";
	    my $beamEnergy = "-";
	} # end chain of elsifs
    } # end scan through log file
    close(LOG);
} # end loop over log files

print "Read energy records.\n";

sub preamble {
    my $run = @_[0];

    my $is_scan = 0;
    my $is_peak = 0;
    foreach my $test ( @scan_runs ) {
	if ( $test == $run ) { $is_scan = 1; }
    }
    foreach my $test ( @peak_runs ) {
	if ( $test == $run ) { $is_peak = 1; }
    }

    if ($is_scan == 1) { "S "; }
    elsif ($is_peak == 1) { "P "; }
    else { "  "; }
}

open(LIST, "thelist.log");
while (my $line = <LIST>) {
    chop($line);
    my @fields = split("\t", $line);
    my ($run,
	$cor, $uncor,
	$begin_time, $begin_en,
	$start_time, $start_en,
	$end_time, $end_en) = @fields[0..8];
    my @updates = @fields[9..$#fields];

    # guess the year
    my $year;
    if ( $run < 122722 ) { $year = 0; }
    elsif ( $run > 122735 ) { $year = 1; }
    elsif ( $start_time > 20000000 ) { $year = 0; }
    else { $year = 1; }

    # super timestamp includes the year as well
    $super_time = 365e6 * $year + $start_time;

    if ( $super_time < $records[0]->[0] ) {
	print &preamble($run)."$run is BEFORE\n";
    }
    elsif ( $super_time > $records[$#records]->[0] ) {
	print &preamble($run)."$run is AFTER\n";
    }
    else {
	my $early = "-";
	my $late = "-";

	for (my $i = 0;  $i <= $#records;  $i++) {
	    if ($records[$i]->[0] + 700 < $super_time) {
		$early = $i;
	    }
	    if ($records[$i]->[0] - 700 > $super_time) {
		$late = $i;
	    }
	    if ( $late ne "-"  &&  $early ne "-") {
		last;
	    }
	} # end walk through records

	my $has2min = 0;
	my $inferred = 0;
	for(my $i = $early;  $i <= $late;  $i++) {
	    if (abs($records[$i]->[0] - $super_time) * 0.0864 / 60. < 5.) {
		$has2min = 1;
		if ($records[$i]->[1] ne "corrected"  ||
		    $records[$i]->[2] ne "corrected"    ) {
		    $inferred = 1;
		} # end if ugly
	    } # end if within 2 minutes
	} # end loop through few records

	if ( $has2min == 0  ||  $inferred == 1 ) {
	    printf("%02s%6d(%9d) ", &preamble($run), $run, $start_time);
	    for(my $i = $early;  $i <= $late;  $i++) {
		if ( $has2min == 0  ||  abs($records[$i]->[0] - $super_time) * 0.0864 / 60. < 2.) {
		    printf("%8.2f(%9d):%1s:%1s ",
			   (($records[$i]->[0] - $super_time) * 0.0864 / 60.),
			   &back_to_cesr($records[$i]->[0]),
			   substr($records[$i]->[1], 0, 1),
			   substr($records[$i]->[2], 0, 1));
		} # end if you want to show this one
	    } # end loop through few records, for printing
	    printf "\n";
	} # if this is bad

    } # end cases
} # end loop through thelist
close(LIST);
