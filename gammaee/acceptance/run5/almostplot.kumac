h/delete $SIGMA(pre+10)
h/delete $SIGMA(pre+11)
h/delete $SIGMA(pre+12)
h/delete $SIGMA(pre+20)
h/delete $SIGMA(pre+90)
do i = 1, 3
  h/delete $SIGMA(pre+20+[i])
  h/delete $SIGMA(pre+30+[i])
  h/delete $SIGMA(pre+40+[i])
  h/delete $SIGMA(pre+50+[i])
enddo

sub $SIGMA(pre+03) $SIGMA(pre+04) $SIGMA(pre+10) 1. $SIGMA(ptoc) 'e'
sub $SIGMA(pre+03) $SIGMA(pre+04) $SIGMA(pre+11) 1. $SIGMA(ptocup) 'e'
sub $SIGMA(pre+03) $SIGMA(pre+04) $SIGMA(pre+12) 1. $SIGMA(ptocdo) 'e'
sub $SIGMA(pre+02) $SIGMA(pre+02) $SIGMA(pre+20) $SIGMA(ptomc) 0. 'e'
sub $SIGMA(pre+09) $SIGMA(pre+09) $SIGMA(pre+90) $SIGMA(ptomc) 0. 'e'
do i = 1, 3
  sub $SIGMA(pre+01) $SIGMA(pre+01) $SIGMA(pre+20+[i]) $SIGMA(ptomcy([i])) 0. 'e'
  add $SIGMA(pre+20+[i]) $SIGMA(pre+05) $SIGMA(pre+30+[i]) 1. $SIGMA(ptobge-ptocy([i])*ctobge) 'e'
  add $SIGMA(pre+30+[i]) $SIGMA(pre+06) $SIGMA(pre+40+[i]) 1. $SIGMA(ptobgp-ptocy([i])*ctobgp) 'e'
  add $SIGMA(pre+40+[i]) $SIGMA(pre+07) $SIGMA(pre+50+[i]) 1. $SIGMA(cosy([i])) 'e'
enddo

* ve/cr backup([1])
* ve/cr backdo([1])
* ve/cr fluff([1])
* h/get_vect/contents $SIGMA(pre+51) backup
* h/get_vect/contents $SIGMA(pre+53) backdo
* h/get_vect/errors $SIGMA(pre+52) fluff
* do i = 1, [1]
*   sigma oops = sqrt(((backup([i]) - backdo([i]))/2)**2 + fluff([i])**2)
*   ve/inp fluff([i]) $SIGMA(oops)
* enddo
* h/put_vect/errors $SIGMA(pre+52) fluff
