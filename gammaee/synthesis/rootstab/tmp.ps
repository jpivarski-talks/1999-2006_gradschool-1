%!PS-Adobe-1.0
/$a2psdict 100 dict def
$a2psdict begin
% Initialize page description variables.
/inch {72 mul} bind def
/landscape false def
/twinpage false def
/sheetheight 11 inch def
/sheetwidth 8.5 inch def
/margin 1.2 inch def
/noborder true def
/noheader true def
/headersize 0.0 def
/bodyfontsize 9 def
/lines 77 def
/columns 96 def
/date (Sep  1 2005 20:13:14) def
%!  PostScript Source Code
%
%  File: imag:/users/local/a2ps/header.ps
%  Created: Tue Nov 29 12:14:02 1988 by miguel@imag (Miguel Santana)
%  Version: 2.0
%  Description: PostScript prolog for a2ps ascii to PostScript program.
% 
%  Edit History:
%  - Original version by evan@csli (Evan Kirshenbaum).
%  - Modified by miguel@imag to:
%    1) Correct an overflow bug when printing page number 10 (operator
%	cvs).
%    2) Define two other variables (sheetwidth, sheetheight) describing
%	the physical page (by default A4 format).
%    3) Minor changes (reorganization, comments, etc).
%  - Modified by tullemans@apolloway.prl.philips.nl
%    1) Correct stack overflows with regard to operators cvs and copy.
%       The resulting substrings where in some cases not popped off 
%       the stack, what can result in a stack overflow.
%    2) Replaced copypage and erasepage by showpage. Page througput
%       degrades severely (see red book page 140) on our ps-printer
%       after printing sheet 16 (i.e. page 8) of a file which was 
%       actually bigger. For this purpose the definitions of startdoc
%       and startpage are changed.
%  - Modified by Tim Clark <T.Clark@uk.ac.warwick> to:
%    1) Print one page per sheet (portrait) as an option.
%    2) Reduce size of file name heading, if it's too big.
%    3) Save and restore PostScript state at begining/end. It now uses
%	conventional %%Page %%Trailer markers.
%    4) Print one wide page per sheet in landscape mode as an option.
%  - Modified by miguel@imag.fr to
%    1) Add new option to print n copies of a file.
%    2) Add new option to suppress heading printing.
%    3) Add new option to suppress page surrounding border printing.
%    4) Add new option to change font size. Number of lines and columns
%	are now automatically adjusted, depending on font size and
%	printing mode used.
%    5) Minor changes (best layout, usage message, etc).
%

% Copyright (c) 1988, Miguel Santana, miguel@imag.imag.fr
%
% Permission is granted to copy and distribute this file in modified
% or unmodified form, for noncommercial use, provided (a) this copyright
% notice is preserved, (b) no attempt is made to restrict redistribution
% of this file, and (c) this file is not distributed as part of any
% collection whose redistribution is restricted by a compilation copyright.
%


% General macros.
/xdef {exch def} bind def
/getfont {exch findfont exch scalefont} bind def

% Page description variables and inch function are defined by a2ps program.

% Character size for differents fonts.
   landscape
   { /filenamefontsize 12 def }
   { /filenamefontsize 16 def }
ifelse
/datefontsize filenamefontsize 0.8 mul def
/headermargin filenamefontsize 0.25 mul def
/bodymargin bodyfontsize 0.7 mul def

% Font assignment to differents kinds of "objects"
/filenamefontname /Helvetica-Bold def
/stdfilenamefont filenamefontname filenamefontsize getfont def
/datefont /Helvetica datefontsize getfont def
/bodyfont /Courier bodyfontsize getfont def

% Logical page attributs (a half of a real page or sheet).
/pagewidth
   bodyfont setfont (0) stringwidth pop columns mul bodymargin dup add add
   def
/pageheight
   bodyfontsize lines mul bodymargin dup add add headersize add
   def

% Coordinates for upper corner of a logical page and for sheet number.
% Coordinates depend on format mode used.
% In twinpage mode, coordinate x of upper corner is not the same for left
% and right pages: upperx is an array of two elements, indexed by sheetside.
/rightmargin margin 3 div def
/leftmargin margin 2 mul 3 div def
/topmargin margin twinpage {3} {2} ifelse div def
landscape
{  % Landscape format
   /uppery rightmargin pageheight add bodymargin add def
   /sheetnumbery sheetwidth leftmargin pageheight add datefontsize add sub def
   twinpage
   {  % Two logical pages
      /upperx [ topmargin			% upperx for left page
		dup 2 mul pagewidth add		% upperx for right page
	      ] def
      /sheetnumberx sheetheight topmargin sub def
   }
   {  /upperx [ topmargin dup ] def
      /sheetnumberx sheetheight topmargin sub datefontsize sub def
   }
   ifelse
}
{  % Portrait format
   /uppery topmargin pageheight add def
   /upperx [ leftmargin dup ] def
   /sheetnumberx sheetwidth rightmargin sub datefontsize sub def
   /sheetnumbery
	 sheetheight 
	 topmargin pageheight add datefontsize add headermargin add
      sub
      def

}
ifelse

% Strings used to make easy printing numbers
/pnum 12 string def
/empty 12 string def

% Other initializations.
/datewidth date stringwidth pop def
/filenameroom
         pagewidth
	 filenamefontsize 4 mul datewidth add (Page 999) stringwidth pop add
      sub
   def


% Function startdoc: initializes printer and global variables.
/startdoc
    { /sheetside 0 def			% sheet side that contains current page
      /sheet 1 def			% sheet number
   } bind def

% Function newfile: init file name and reset page number for each new file.
/newfile
    { cleanup
      /filename xdef
      /filenamewidth filename stringwidth pop def
      /filenamefont
	 filenamewidth filenameroom gt
	 {
	       filenamefontname
	       filenamefontsize filenameroom mul filenamewidth div
	    getfont
	 }
	 {  stdfilenamefont }
	 ifelse
	 def
      /pagenum 1 def
    } bind def

% Function printpage: Print a physical page.
/printpage
    { /sheetside 0 def
      twinpage
      {  noborder not
	    { sheetnumber }
	 if
      }
      {  noheader noborder not and
	    { sheetnumber }
	 if
      }
      ifelse
      showpage 
%      pagesave restore
      /sheet sheet 1 add def
    } bind def

% Function cleanup: terminates printing, flushing last page if necessary.
/cleanup
    { twinpage sheetside 1 eq and
         { printpage }
      if
    } bind def

%
% Function startpage: prints page header and page border and initializes
% printing of the file lines.
/startpage
    { sheetside 0 eq
	{ % /pagesave save def
	  landscape
	    { sheetwidth 0 inch translate	% new coordinates system origin
	      90 rotate				% landscape format
	    } if
	} if
      noborder not { printborder } if
      noheader not { printheader } if
	 upperx sheetside get  bodymargin  add
	    uppery
	    bodymargin bodyfontsize add  noheader {0} {headersize} ifelse  add
	 sub
      moveto
      bodyfont setfont
    } bind def

% Function printheader: prints page header.
/printheader
    { upperx sheetside get  uppery headersize sub 1 add  moveto
      datefont setfont
      gsave
        datefontsize headermargin rmoveto
	date show					% date/hour
      grestore
      gsave
	pagenum pnum cvs pop
	   pagewidth (Page 999) stringwidth pop sub
	   headermargin
	rmoveto
        (Page ) show pnum show				% page number
      grestore
      empty pnum copy pop
      gsave
        filenamefont setfont
	      filenameroom filename stringwidth pop sub 2 div datewidth add
	      bodymargin 2 mul 
	   add 
	   headermargin
	rmoveto
        filename show						% file name
      grestore
    } bind def

% Function printborder: prints border page.
/printborder 
    { upperx sheetside get uppery moveto
      gsave					% print the four sides
        pagewidth 0 rlineto			% of the square
        0 pageheight neg rlineto
        pagewidth neg 0 rlineto
        closepath stroke
      grestore
      noheader not
         { 0 headersize neg rmoveto pagewidth 0 rlineto stroke }
      if
    } bind def

%
% Function endpage: adds a sheet number to the page (footnote) and prints
% the formatted page (physical impression). Activated at the end of each
% source page (lines reached or FF character).
/endpage
   { /pagenum pagenum 1 add def
     twinpage  sheetside 0 eq  and
        { /sheetside 1 def }
        { printpage }
     ifelse
   } bind def

% Function sheetnumber: prints the sheet number.
/sheetnumber
    { sheetnumberx sheetnumbery moveto
      datefont setfont
      sheet pnum cvs
	 dup stringwidth pop (0) stringwidth pop sub neg 0 rmoveto show
      empty pnum copy pop
    } bind def

% Function s: print a source line
/s  { gsave
        show
      grestore
      0 bodyfontsize neg rmoveto
    } bind def
%%EndProlog

/docsave save def
startdoc
(rootstab.py) newfile
/sheet 1 def
%%Page: 1 1
startpage
( # HADRON CUTS) s
( #    m_cut[0] = \(v[k_trignum] > 0\);) s
( #    m_cut[1] = \(fabs\(v[k_d0close]\) < 0.005\);) s
( #    m_cut[2] = \(fabs\(v[k_wz]\) < 0.075  ||) s
( #              \(v[k_wz] == -1000.  &&  fabs\(v[k_z0close]\) < 0.075\)\);) s
( #    m_cut[3] = \(v[k_p1] < 0.8\);) s
( #    m_cut[4] = \(v[k_coolvisen] > 0.4\);) s
( #    m_cut[5] = \(v[k_l4dec] > 0.\);) s
( ) s
( # BHABHA CUTS) s
( #    m_cut[0] = \(v[k_trignum] > 0\);) s
( #    m_cut[1] = \(v[k_oppositecharge] > 0\);) s
( #    m_cut[2] = \(v[k_p2] > 0.7\);) s
( #    m_cut[3] = \(fabs\(v[k_d0close]\) < 0.005\);) s
( #    m_cut[4] = \(fabs\(v[k_wz]\) < 0.075  ||) s
( #              \(v[k_wz] == -1000.  &&  fabs\(v[k_z0close]\) < 0.075\)\);) s
( #    m_cut[5] = \(v[k_eisr] < 0.2\);) s
( #    m_cut[6] = \(v[k_econstr] < 0.2\);) s
( #    m_cut[7] = \(v[k_cos1] < 0.79  &&  v[k_cos2] < 0.76\) || \(v[k_cos1] < 0.76  &&  v[k_cos2] < ) s
( 0.79\);) s
( #    m_cut[8] = \(v[k_e2] > 0.4\);) s
( #    m_cut[9] = \(v[k_l4dec] > 0\);) s
( ) s
( execfile\("/home/mccann/bin/python/jimtools.py"\)) s
( p = pyxplot.PyxPlot\("rootstab2"\)) s
( ) s
( class RunSummary : pass) s
( runsummary = pickle.load\(open\("/home/mccann/synthesis/lumieff/runsummary.p"\)\)) s
( ) s
( low_runs = [124684, 124685, 124687, 124688, 124690, 124691, 124699, 124701, 124702, 124704, 124) s
( 705, 124706, 124707, 124708, 124709, 124712, 124713, 124714, 124716, 124718, 124719, 124720, 124) s
( 721, 124722, 124725, 124726, 124727, 124728, 124729, 124730, 124731, 124732, 124733, 124734, 124) s
( 735, 124736]) s
( high_runs = [125360, 125361, 125362, 125363, 125364, 125366, 125368, 125369, 125370, 125372, 12) s
( 5373, 125375, 125377, 125378, 125380, 125382, 125384, 125389, 125391, 125392, 125395, 125396, 12) s
( 5397, 125398, 125399, 125400, 125403, 125404, 125405, 125407, 125408, 125416]) s
( ) s
( def getntuple\(run\):) s
(   return rootntuple.RootNtuple\("/home/mccann/synthesis/root/db_"+str\(run\)+".root:/UpsilonGammaE) s
( EAnalysisProc/nt1"\)) s
( ) s
( low = getntuple\(low_runs[0]\)) s
( for r in low_runs[1:]:) s
(   low += getntuple\(r\)) s
( ) s
( high = getntuple\(high_runs[0]\)) s
( for r in high_runs[1:]:) s
(   high += getntuple\(r\)) s
( ) s
( def hadron\(type\):) s
(   return type % 10 == 1) s
( ) s
( def gamgam\(type\):) s
(   return int\(floor\(type / 10\)\) % 10 == 1) s
( ) s
( def bhabha\(type\):) s
(   return int\(floor\(type / 100\)\) % 10 == 1) s
( ) s
( # low.stop = 100) s
( # high.stop = 100) s
( ) s
( low.filter = hadron) s
( high.filter = hadron) s
( low.optimize = ["tracks", "visen", "ccen", "neue", "chen"]) s
( high.optimize = ["tracks", "visen", "ccen", "neue", "chen"]) s
( ) s
( low_tracks = hist\(*ibin\(0, 18\)\)) s
( low_visen = hist\(120, 0, 1.2\)) s
( low_ccen = hist\(120, 0, 1.2\)) s
( low_neue = hist\(120, 0, 1.2\)) s
( low_chen = hist\(120, 0, 1.2\)) s
( high_tracks = hist\(*ibin\(0, 18\)\)) s
( high_visen = hist\(120, 0, 1.2\)) s
( high_ccen = hist\(120, 0, 1.2\)) s
( high_neue = hist\(120, 0, 1.2\)) s
( high_chen = hist\(120, 0, 1.2\)) s
( ) s
endpage
%%Page: 2 2
startpage
( low_count = 0) s
( for n in low:) s
(   low_count += 1) s
(   low_tracks.fill\(n.tracks\)) s
(   low_visen.fill\(n.visen\)) s
(   low_ccen.fill\(n.ccen\)) s
(   low_neue.fill\(n.neue\)) s
(   low_chen.fill\(n.chen\)) s
( ) s
( high_count = 0) s
( for n in high:) s
(   high_count += 1) s
(   high_tracks.fill\(n.tracks\)) s
(   high_visen.fill\(n.visen\)) s
(   high_ccen.fill\(n.ccen\)) s
(   high_neue.fill\(n.neue\)) s
(   high_chen.fill\(n.chen\)) s
( ) s
( low_tracks.rootn\(\)) s
( low_visen.rootn\(\)) s
( low_ccen.rootn\(\)) s
( low_neue.rootn\(\)) s
( low_chen.rootn\(\)) s
( high_tracks.rootn\(\)) s
( high_visen.rootn\(\)) s
( high_ccen.rootn\(\)) s
( high_neue.rootn\(\)) s
( high_chen.rootn\(\)) s
( ) s
( low_tracks /= low_count) s
( low_visen /= low_count) s
( low_ccen /= low_count) s
( low_neue /= low_count) s
( low_chen /= low_count) s
( high_tracks /= high_count) s
( high_visen /= high_count) s
( high_ccen /= high_count) s
( high_neue /= high_count) s
( high_chen /= high_count) s
( ) s
( message = r"""My hadronic cuts, normalized to unit area.) s
( ) s
( solid \(``low'' cross-section\) is 16--17 March \("""+str\(low_count\)+""" events\).) s
( ) s
( dashed \(``high'' cross-section\) is 13--14 April \("""+str\(high_count\)+""" events\).) s
( ) s
( Errorbars are {\\it really} small.""") s
( ) s
( p\(low_tracks.plot\(\), high_tracks.plot\(\).steps\(style="dashed"\), xtitle="Number of tracks"\)) s
( p.append_log\(message, {"low_tracks": low_tracks, "high_tracks": high_tracks}\)) s
( ) s
( p\(low_visen.plot\(\), high_visen.plot\(\).steps\(style="dashed"\), xtitle="Visible energy fraction"\)) s
( p.append_log\(message, {"low_visen": low_visen, "high_visen": high_visen}\)) s
( ) s
( p\(low_ccen.plot\(\), high_ccen.plot\(\).steps\(style="dashed"\), xtitle="CC energy fraction"\)) s
( p.append_log\(message, {"low_ccen": low_ccen, "high_ccen": high_ccen}\)) s
( ) s
( p\(low_neue.plot\(\), high_neue.plot\(\).steps\(style="dashed"\), xtitle="Neutral energy fraction"\)) s
( p.append_log\(message, {"low_neue": low_neue, "high_neue": high_neue}\)) s
( ) s
( p\(low_chen.plot\(\), high_chen.plot\(\).steps\(style="dashed"\), xtitle="Charged energy fraction"\)) s
( p.append_log\(message, {"low_chen": low_chen, "high_chen": high_chen}\)) s
( ) s
( ) s
( ) s
( low.filter = bhabha) s
( high.filter = bhabha) s
( low.optimize = ["run", "tracks", "cosp", "cosn", "p1x", "p1y", "p1z", "p2x", "p2y", "p2z", "eis) s
( r", "econstr", "e1", "e2", "e3", "phi1", "phi2", "cos1", "cos2"]) s
( high.optimize = ["run", "tracks", "cosp", "cosn", "p1x", "p1y", "p1z", "p2x", "p2y", "p2z", "ei) s
( sr", "econstr", "e1", "e2", "e3", "phi1", "phi2", "cos1", "cos2"]) s
( ) s
( lowb_tracks = hist\(*ibin\(0, 18\)\)) s
( lowb_cosp = hist\(100, -1, 1\)) s
( lowb_cosn = hist\(100, -1, 1\)) s
( lowb_trackphi = hist\(100, -pi, pi\)) s
( lowb_p1 = hist\(120, 0, 1.2\)) s
endpage
%%Page: 3 3
startpage
( lowb_p2 = hist\(120, 0, 1.2\)) s
( lowb_p1perp = hist\(120, 0, 1.2\)) s
( lowb_p2perp = hist\(120, 0, 1.2\)) s
( lowb_eisr = hist\(100, 0, 1\)) s
( lowb_econstr = hist\(150, -1.5, 1\)) s
( lowb_e1 = hist\(120, 0, 1.2\)) s
( lowb_e2 = hist\(120, 0, 1.2\)) s
( lowb_e3 = hist\(120, 0, 1.2\)) s
( lowb_phi1 = hist\(100, -pi, pi\)) s
( lowb_phi2 = hist\(100, -pi, pi\)) s
( lowb_cos1 = hist\(100, -1, 1\)) s
( lowb_cos2 = hist\(100, -1, 1\)) s
( highb_tracks = hist\(*ibin\(0, 18\)\)) s
( highb_cosp = hist\(100, -1, 1\)) s
( highb_cosn = hist\(100, -1, 1\)) s
( highb_trackphi = hist\(100, -pi, pi\)) s
( highb_p1 = hist\(120, 0, 1.2\)) s
( highb_p2 = hist\(120, 0, 1.2\)) s
( highb_p1perp = hist\(120, 0, 1.2\)) s
( highb_p2perp = hist\(120, 0, 1.2\)) s
( highb_eisr = hist\(100, 0, 1\)) s
( highb_econstr = hist\(150, -1.5, 1\)) s
( highb_e1 = hist\(120, 0, 1.2\)) s
( highb_e2 = hist\(120, 0, 1.2\)) s
( highb_e3 = hist\(120, 0, 1.2\)) s
( highb_phi1 = hist\(100, -pi, pi\)) s
( highb_phi2 = hist\(100, -pi, pi\)) s
( highb_cos1 = hist\(100, -1, 1\)) s
( highb_cos2 = hist\(100, -1, 1\)) s
( ) s
( low_count = 0) s
( for n in low:) s
(   low_count += 1) s
(   lowb_tracks.fill\(n.tracks\)) s
(   lowb_cosp.fill\(n.cosp\)) s
(   lowb_cosn.fill\(n.cosn\)) s
(   lowb_trackphi.fill\(atan2\(n.p1y, n.p1x\)\)) s
(   lowb_p1.fill\(sqrt\(n.p1x**2 + n.p1y**2 + n.p1z**2\)/runsummary[n.run].energy\)) s
(   lowb_p2.fill\(sqrt\(n.p2x**2 + n.p2y**2 + n.p2z**2\)/runsummary[n.run].energy\)) s
(   lowb_p1perp.fill\(sqrt\(n.p1x**2 + n.p1y**2\)/runsummary[n.run].energy\)) s
(   lowb_p2perp.fill\(sqrt\(n.p2x**2 + n.p2y**2\)/runsummary[n.run].energy\)) s
(   lowb_eisr.fill\(n.eisr\)) s
(   lowb_econstr.fill\(n.econstr\)) s
(   lowb_e1.fill\(n.e1\)) s
(   lowb_e2.fill\(n.e2\)) s
(   lowb_e3.fill\(n.e3\)) s
(   lowb_phi1.fill\(n.phi1\)) s
(   lowb_phi2.fill\(n.phi2\)) s
(   lowb_cos1.fill\(n.cos1\)) s
(   lowb_cos2.fill\(n.cos2\)) s
( ) s
( high_count = 0) s
( for n in high:) s
(   high_count += 1) s
(   highb_tracks.fill\(n.tracks\)) s
(   highb_cosp.fill\(n.cosp\)) s
(   highb_cosn.fill\(n.cosn\)) s
(   highb_trackphi.fill\(atan2\(n.p1y, n.p1x\)\)) s
(   highb_p1.fill\(sqrt\(n.p1x**2 + n.p1y**2 + n.p1z**2\)/runsummary[n.run].energy\)) s
(   highb_p2.fill\(sqrt\(n.p2x**2 + n.p2y**2 + n.p2z**2\)/runsummary[n.run].energy\)) s
(   highb_p1perp.fill\(sqrt\(n.p1x**2 + n.p1y**2\)/runsummary[n.run].energy\)) s
(   highb_p2perp.fill\(sqrt\(n.p2x**2 + n.p2y**2\)/runsummary[n.run].energy\)) s
(   highb_eisr.fill\(n.eisr\)) s
(   highb_econstr.fill\(n.econstr\)) s
(   highb_e1.fill\(n.e1\)) s
(   highb_e2.fill\(n.e2\)) s
(   highb_e3.fill\(n.e3\)) s
(   highb_phi1.fill\(n.phi1\)) s
(   highb_phi2.fill\(n.phi2\)) s
(   highb_cos1.fill\(n.cos1\)) s
(   highb_cos2.fill\(n.cos2\)) s
( ) s
( pickle.dump\(\(low_count, high_count, lowb_tracks, lowb_cosp, lowb_cosn, lowb_trackphi, lowb_p1, ) s
( lowb_p2, lowb_p1perp, lowb_p2perp, lowb_eisr, lowb_econstr, lowb_e1, lowb_e2, lowb_e3, lowb_phi1) s
( , lowb_phi2, lowb_cos1, lowb_cos2, highb_tracks, highb_cosp, highb_cosn, highb_trackphi, highb_p) s
( 1, highb_p2, highb_p1perp, highb_p2perp, highb_eisr, highb_econstr, highb_e1, highb_e2, highb_e3) s
( , highb_phi1, highb_phi2, highb_cos1, highb_cos2\), open\("tmp.p", "w"\)\)) s
endpage
%%Page: 4 4
startpage
( ) s
( \(low_count, high_count, lowb_tracks, lowb_cosp, lowb_cosn, lowb_trackphi, lowb_p1, lowb_p2, low) s
( b_p1perp, lowb_p2perp, lowb_eisr, lowb_econstr, lowb_e1, lowb_e2, lowb_e3, lowb_phi1, lowb_phi2,) s
(  lowb_cos1, lowb_cos2, highb_tracks, highb_cosp, highb_cosn, highb_trackphi, highb_p1, highb_p2,) s
(  highb_p1perp, highb_p2perp, highb_eisr, highb_econstr, highb_e1, highb_e2, highb_e3, highb_phi1) s
( , highb_phi2, highb_cos1, highb_cos2\) = pickle.load\(open\("tmp.p"\)\)) s
( ) s
( hist_names = ["tracks", "cosp", "cosn", "trackphi", "p1", "p2", "p1perp", "p2perp", "eisr", "ec) s
( onstr", "e1", "e2", "e3", "phi1", "phi2", "cos1", "cos2"]) s
( ) s
( hist_titles = {"tracks": r"Number of tracks", \\) s
(                "cosp": r"Positive-track $\\cos\\theta$", \\) s
(                "cosn": r"Negative-track $\\cos\\theta$", \\) s
(                "trackphi": r"Biggest-$|\\vec{p}|$ track $\\phi$", \\) s
(                "p1": r"$|\\vec{p}_1| / E_{beam}$", \\) s
(                "p2": r"$|\\vec{p}_2| / E_{beam}$", \\) s
(                "p1perp": r"$\(\\vec{p}_1\)_T / E_{beam}$", \\) s
(                "p2perp": r"$\(\\vec{p}_2\)_T / E_{beam}$", \\) s
(                "eisr": r"$|\\vec{p}_1 + \\vec{p}_2| / E_{beam}$", \\) s
(                "econstr": r"$\(2 E_{beam} - |\\vec{p}_1| - |\\vec{p}_2| - |\\vec{p}_1 + \\vec{p}_2|\)) s
( /\(2 E_{beam}\)$", \\) s
(                "e1": r"Biggest-shower energy / $E_{beam}$", \\) s
(                "e2": r"Second-biggest shower energy / $E_{beam}$", \\) s
(                "e3": r"Third-biggest shower energy / $E_{beam}$", \\) s
(                "phi1": r"Biggest-shower $\\phi$", \\) s
(                "phi2": r"Second-biggest shower $\\phi$", \\) s
(                "cos1": r"Biggest-shower $\\cos\\theta$", \\) s
(                "cos2": r"Second-biggest shower $\\cos\\theta$"}) s
( ) s
( hist_logy = {"tracks": True, \\) s
(              "cosp": False, \\) s
(              "cosn": False, \\) s
(              "trackphi": False, \\) s
(              "p1": True, \\) s
(              "p2": True, \\) s
(              "p1perp": True, \\) s
(              "p2perp": True, \\) s
(              "eisr": False, \\) s
(              "econstr": True, \\) s
(              "e1": False, \\) s
(              "e2": False, \\) s
(              "e3": False, \\) s
(              "phi1": False, \\) s
(              "phi2": False, \\) s
(              "cos1": False, \\) s
(              "cos2": False}) s
( ) s
( for n in hist_names:) s
(   exec "lowb_"+n+".rootn\(\)") s
(   exec "lowb_"+n+" /= low_count") s
(   exec "highb_"+n+".rootn\(\)") s
(   exec "highb_"+n+" /= high_count") s
( ) s
( message = r"""My bhabha cuts, normalized to unit area.) s
( ) s
( solid \(``low'' cross-section\) is 16--17 March \("""+str\(low_count\)+""" events\).) s
( ) s
( dashed \(``high'' cross-section\) is 13--14 April \("""+str\(high_count\)+""" events\).) s
( ) s
( Errorbars are {\\it really} small.""") s
( ) s
( for n in hist_names[4:]:) s
(   exec "p\(lowb_"+n+".plot\(\), highb_"+n+".plot\(\).steps\(style=\\"dashed\\", logy="+str\(hist_logy[n]) s
( \)+"\), xtitle=r\\""+hist_titles[n]+"\\", logy="+str\(hist_logy[n]\)+"\)") s
(   raw_input\(\)) s
(   exec "p.append_log\(message, {\\"lowb_"+n+"\\": lowb_"+n+", \\"highb_"+n+"\\": highb_"+n+"}\)") s
(   raw_input\(\)) s
( ) s
( ) s
( ) s
( low.filter = bhabha) s
( high.filter = bhabha) s
( low.optimize = ["e1", "e2"]) s
( high.optimize = ["e1", "e2"]) s
( ) s
( big1sum = 0.) s
( big2sum = 0.) s
endpage
%%Page: 5 5
startpage
( big1sum2 = 0.) s
( big2sum2 = 0.) s
( total = 0) s
( for n in low:) s
(   big1sum += n.e1) s
(   big2sum += n.e2) s
(   big1sum2 += n.e1**2) s
(   big2sum2 += n.e2**2) s
(   total += 1) s
( print "big1", big1sum/total, sqrt\(big1sum2/total - \(big1sum/total\)**2\)/sqrt\(total\)) s
( print "big2", big2sum/total, sqrt\(big2sum2/total - \(big2sum/total\)**2\)/sqrt\(total\)) s
( ) s
( big1sum = 0.) s
( big2sum = 0.) s
( big1sum2 = 0.) s
( big2sum2 = 0.) s
( total = 0) s
( for n in high:) s
(   big1sum += n.e1) s
(   big2sum += n.e2) s
(   big1sum2 += n.e1**2) s
(   big2sum2 += n.e2**2) s
(   total += 1) s
( print "big1", big1sum/total, sqrt\(big1sum2/total - \(big1sum/total\)**2\)/sqrt\(total\)) s
( print "big2", big2sum/total, sqrt\(big2sum2/total - \(big2sum/total\)**2\)/sqrt\(total\)) s
endpage

%%Trailer
cleanup
docsave restore end
